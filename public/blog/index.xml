<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog-rsses on Tim Nosov</title>
    <link>http://timnosov.com/blog/index.xml</link>
    <description>Recent content in Blog-rsses on Tim Nosov</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-US</language>
    <lastBuildDate>Tue, 17 Oct 2017 23:29:28 -0700</lastBuildDate>
    <atom:link href="http://timnosov.com/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Exploring the Universe with Gesture Based UI</title>
      <link>http://timnosov.com/blog/kinect-universe/</link>
      <pubDate>Tue, 17 Oct 2017 23:29:28 -0700</pubDate>
      
      <guid>http://timnosov.com/blog/kinect-universe/</guid>
      <description>

&lt;p&gt;Controlling a computer with gestures is a mind-blowing and perspective-shifting experience. The idea existed since forever ago (i.e Minority Report) and attempts to bring it to masses (Kinect) have been made but gesture control is still far from being ubiquitous, I, for example, have never tried it, until a few days ago.&lt;/p&gt;

&lt;p&gt;WorldWide Telescope is an open-source application which provides an interactive way to explore the universe. &lt;a href=&#34;https://en.wikipedia.org/wiki/Jonathan_Fay&#34;&gt;Jonathan Fay&lt;/a&gt; has build a Kinect interface to navigate Worldwide Telescope:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/1-tMp4WkQjA&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;p&gt;&lt;a href=&#34;http://lab212.org/&#34;&gt;Lab212&lt;/a&gt; have built an art installation using Worldwide Telescope and Kinect to simulate the experience of swinging through space on a swing:&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/5Kj_AGNJsL4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;p&gt;These experiments inspired us to recreate them for the purpose of education and outreach for the &lt;a href=&#34;http://sfusat.com/&#34;&gt;SFU Satellite Design Team&lt;/a&gt;. Harrison Handley was the mind behind the idea and the driving force for the project.&lt;/p&gt;

&lt;p&gt;We have decided to substitute Worldwide Telescope with &lt;a href=&#34;http://stars.chromeexperiments.com/&#34;&gt;100,000 Stars Chrome Experiment&lt;/a&gt; developed by Google’s &lt;a href=&#34;https://www.html5rocks.com/en/tutorials/casestudies/100000stars/&#34;&gt;Data Arts Team&lt;/a&gt;. 100,000 Stars is a fantastic visualization of the Milky Way Galaxy and we chose it over Worldwide Telescope, due to the fact that it was easier to navigate, simpler to understand and simpler to control with Kinect. (Harrison is still very keen on implementing a Worldwide telescope version though.)&lt;/p&gt;

&lt;p&gt;Harrison implemented a Kinect interface and came up with a control scheme: hands held together — zooming in, hands wider than elbows — zooming out, making a fist and moving it — to simulating a mouse click and drag.&lt;/p&gt;

&lt;p&gt;We demoed this at &lt;a href=&#34;http://www.sciencerendezvous.ca/&#34;&gt;Science Rendezvous&lt;/a&gt; — Canada’s biggest science fair as a part of the SFU Satellite Design Team’s booth. Our visitors were mostly elementary school children and their parents and also some university-level students. The result was incredible:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Kids and adults alike were mind-blown by the idea of waving hands to control a computer&lt;/li&gt;
&lt;li&gt;100,000 Star Experiment with its stunning graphics and a simple control scheme proved to be an excellent way to explore the universe, be fascinated by its size and complexity and be curious to learn more&lt;/li&gt;
&lt;li&gt;Kinect with its cool stick-figure visualization of bodies was a fantastic learning tool — kids and adults were curious about sensors and algorithms and coding languages&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;What was a true validation of the value of the demo was that many bugs in our demo didn’t drive anyone away or made anyone bored, on the contrary, whenever an issue arose (for example sudden poor gesture recognition), kids wanted to find a way to solve it!&lt;/p&gt;

&lt;p&gt;This project turned out to be a fantastic way to unleash creativity and foster curiosity and it was an excellent science, art and technology demonstration.&lt;/p&gt;

&lt;h2 id=&#34;resourses&#34;&gt;Resourses&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://stuffin.space/&#34;&gt;Another simple web-based demo to explore space using Kinect&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/WorldWideTelescope&#34;&gt;Worldwide Telescope’s Github&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://depthjs.media.mit.edu/&#34;&gt;JS library for interfacing with Kinect&lt;/a&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Machine Learning, Sensor Fusion and IoT for Tracking Customers in Grocery Stores</title>
      <link>http://timnosov.com/blog/indoor-positioning/</link>
      <pubDate>Tue, 17 Oct 2017 23:15:09 -0700</pubDate>
      
      <guid>http://timnosov.com/blog/indoor-positioning/</guid>
      <description>&lt;p&gt;At LOCUS we are bringing online-inspired customer analytics to brick and mortar stores using Internet of Things and Artifiial Intelligence.&lt;/p&gt;

&lt;p&gt;When a customer browses through an on-line store, every single click is recorder and analyzed. This data is then used to imrpove customer experience and drive sales. In a physical store the only available data is the receipt and points cards. How the customer arrived at the purchase is a mystery.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>How Cold is Space? Thermal Finate Element Analysis of a CubeSat</title>
      <link>http://timnosov.com/blog/satellite-fea/</link>
      <pubDate>Tue, 17 Oct 2017 23:14:05 -0700</pubDate>
      
      <guid>http://timnosov.com/blog/satellite-fea/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Evolution, Greediness and Satellite Scheduling</title>
      <link>http://timnosov.com/blog/optimization/</link>
      <pubDate>Tue, 17 Oct 2017 23:13:05 -0700</pubDate>
      
      <guid>http://timnosov.com/blog/optimization/</guid>
      <description></description>
    </item>
    
    <item>
      <title>Migrate to Hugo from Jekyll</title>
      <link>http://timnosov.com/blog/migrate-from-jekyll/</link>
      <pubDate>Mon, 10 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://timnosov.com/blog/migrate-from-jekyll/</guid>
      <description>

&lt;h2 id=&#34;move-static-content-to-static&#34;&gt;Move static content to &lt;code&gt;static&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;Jekyll has a rule that any directory not starting with &lt;code&gt;_&lt;/code&gt; will be copied as-is to the &lt;code&gt;_site&lt;/code&gt; output. Hugo keeps all static content under &lt;code&gt;static&lt;/code&gt;. You should therefore move it all there.
With Jekyll, something that looked like&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ images/
        logo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;should become&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;▾ &amp;lt;root&amp;gt;/
    ▾ static/
        ▾ images/
            logo.png
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Additionally, you&amp;rsquo;ll want any files that should reside at the root (such as &lt;code&gt;CNAME&lt;/code&gt;) to be moved to &lt;code&gt;static&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;create-your-hugo-configuration-file&#34;&gt;Create your Hugo configuration file&lt;/h2&gt;

&lt;p&gt;Hugo can read your configuration as JSON, YAML or TOML. Hugo supports parameters custom configuration too. Refer to the &lt;a href=&#34;http://timnosov.com/overview/configuration/&#34;&gt;Hugo configuration documentation&lt;/a&gt; for details.&lt;/p&gt;

&lt;h2 id=&#34;set-your-configuration-publish-folder-to-site&#34;&gt;Set your configuration publish folder to &lt;code&gt;_site&lt;/code&gt;&lt;/h2&gt;

&lt;p&gt;The default is for Jekyll to publish to &lt;code&gt;_site&lt;/code&gt; and for Hugo to publish to &lt;code&gt;public&lt;/code&gt;. If, like me, you have &lt;a href=&#34;http://blog.blindgaenger.net/generate_github_pages_in_a_submodule.html&#34;&gt;&lt;code&gt;_site&lt;/code&gt; mapped to a git submodule on the &lt;code&gt;gh-pages&lt;/code&gt; branch&lt;/a&gt;, you&amp;rsquo;ll want to do one of two alternatives:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Change your submodule to point to map &lt;code&gt;gh-pages&lt;/code&gt; to public instead of &lt;code&gt;_site&lt;/code&gt; (recommended).&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git submodule deinit _site
git rm _site
git submodule add -b gh-pages git@github.com:your-username/your-repo.git public
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Or, change the Hugo configuration to use &lt;code&gt;_site&lt;/code&gt; instead of &lt;code&gt;public&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
    ..
    &amp;quot;publishdir&amp;quot;: &amp;quot;_site&amp;quot;,
    ..
}
&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;convert-jekyll-templates-to-hugo-templates&#34;&gt;Convert Jekyll templates to Hugo templates&lt;/h2&gt;

&lt;p&gt;That&amp;rsquo;s the bulk of the work right here. The documentation is your friend. You should refer to &lt;a href=&#34;http://jekyllrb.com/docs/templates/&#34;&gt;Jekyll&amp;rsquo;s template documentation&lt;/a&gt; if you need to refresh your memory on how you built your blog and &lt;a href=&#34;http://timnosov.com/layout/templates/&#34;&gt;Hugo&amp;rsquo;s template&lt;/a&gt; to learn Hugo&amp;rsquo;s way.&lt;/p&gt;

&lt;p&gt;As a single reference data point, converting my templates for &lt;a href=&#34;http://heyitsalex.net/&#34;&gt;heyitsalex.net&lt;/a&gt; took me no more than a few hours.&lt;/p&gt;

&lt;h2 id=&#34;convert-jekyll-plugins-to-hugo-shortcodes&#34;&gt;Convert Jekyll plugins to Hugo shortcodes&lt;/h2&gt;

&lt;p&gt;Jekyll has &lt;a href=&#34;http://jekyllrb.com/docs/plugins/&#34;&gt;plugins&lt;/a&gt;; Hugo has &lt;a href=&#34;http://timnosov.com/doc/shortcodes/&#34;&gt;shortcodes&lt;/a&gt;. It&amp;rsquo;s fairly trivial to do a port.&lt;/p&gt;

&lt;h3 id=&#34;implementation&#34;&gt;Implementation&lt;/h3&gt;

&lt;p&gt;As an example, I was using a custom &lt;a href=&#34;https://github.com/alexandre-normand/alexandre-normand/blob/74bb12036a71334fdb7dba84e073382fc06908ec/_plugins/image_tag.rb&#34;&gt;&lt;code&gt;image_tag&lt;/code&gt;&lt;/a&gt; plugin to generate figures with caption when running Jekyll. As I read about shortcodes, I found Hugo had a nice built-in shortcode that does exactly the same thing.&lt;/p&gt;

&lt;p&gt;Jekyll&amp;rsquo;s plugin:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;    module Jekyll
      class ImageTag &amp;lt; Liquid::Tag
        @url = nil
        @caption = nil
        @class = nil
        @link = nil
        // Patterns
        IMAGE_URL_WITH_CLASS_AND_CAPTION =
        IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK = /(\w+)(\s+)((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;(\s+)-&amp;gt;((https?:\/\/|\/)(\S+))(\s*)/i
        IMAGE_URL_WITH_CAPTION = /((https?:\/\/|\/)(\S+))(\s+)&amp;quot;(.*?)&amp;quot;/i
        IMAGE_URL_WITH_CLASS = /(\w+)(\s+)((https?:\/\/|\/)(\S+))/i
        IMAGE_URL = /((https?:\/\/|\/)(\S+))/i
        def initialize(tag_name, markup, tokens)
          super
          if markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION_AND_LINK
            @class   = $1
            @url     = $3
            @caption = $7
            @link = $9
          elsif markup =~ IMAGE_URL_WITH_CLASS_AND_CAPTION
            @class   = $1
            @url     = $3
            @caption = $7
          elsif markup =~ IMAGE_URL_WITH_CAPTION
            @url     = $1
            @caption = $5
          elsif markup =~ IMAGE_URL_WITH_CLASS
            @class = $1
            @url   = $3
          elsif markup =~ IMAGE_URL
            @url = $1
          end
        end
        def render(context)
          if @class
            source = &amp;quot;&amp;lt;figure class=&#39;#{@class}&#39;&amp;gt;&amp;quot;
          else
            source = &amp;quot;&amp;lt;figure&amp;gt;&amp;quot;
          end
          if @link
            source += &amp;quot;&amp;lt;a href=\&amp;quot;#{@link}\&amp;quot;&amp;gt;&amp;quot;
          end
          source += &amp;quot;&amp;lt;img src=\&amp;quot;#{@url}\&amp;quot;&amp;gt;&amp;quot;
          if @link
            source += &amp;quot;&amp;lt;/a&amp;gt;&amp;quot;
          end
          source += &amp;quot;&amp;lt;figcaption&amp;gt;#{@caption}&amp;lt;/figcaption&amp;gt;&amp;quot; if @caption
          source += &amp;quot;&amp;lt;/figure&amp;gt;&amp;quot;
          source
        end
      end
    end
    Liquid::Template.register_tag(&#39;image&#39;, Jekyll::ImageTag)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;is written as this Hugo shortcode:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;!-- image --&amp;gt;
&amp;lt;figure {{ with .Get &amp;quot;class&amp;quot; }}class=&amp;quot;{{.}}&amp;quot;{{ end }}&amp;gt;
    {{ with .Get &amp;quot;link&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt;{{ end }}
        &amp;lt;img src=&amp;quot;{{ .Get &amp;quot;src&amp;quot; }}&amp;quot; {{ if or (.Get &amp;quot;alt&amp;quot;) (.Get &amp;quot;caption&amp;quot;) }}alt=&amp;quot;{{ with .Get &amp;quot;alt&amp;quot;}}{{.}}{{else}}{{ .Get &amp;quot;caption&amp;quot; }}{{ end }}&amp;quot;{{ end }} /&amp;gt;
    {{ if .Get &amp;quot;link&amp;quot;}}&amp;lt;/a&amp;gt;{{ end }}
    {{ if or (or (.Get &amp;quot;title&amp;quot;) (.Get &amp;quot;caption&amp;quot;)) (.Get &amp;quot;attr&amp;quot;)}}
    &amp;lt;figcaption&amp;gt;{{ if isset .Params &amp;quot;title&amp;quot; }}
        {{ .Get &amp;quot;title&amp;quot; }}{{ end }}
        {{ if or (.Get &amp;quot;caption&amp;quot;) (.Get &amp;quot;attr&amp;quot;)}}&amp;lt;p&amp;gt;
        {{ .Get &amp;quot;caption&amp;quot; }}
        {{ with .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;a href=&amp;quot;{{.}}&amp;quot;&amp;gt; {{ end }}
            {{ .Get &amp;quot;attr&amp;quot; }}
        {{ if .Get &amp;quot;attrlink&amp;quot;}}&amp;lt;/a&amp;gt; {{ end }}
        &amp;lt;/p&amp;gt; {{ end }}
    &amp;lt;/figcaption&amp;gt;
    {{ end }}
&amp;lt;/figure&amp;gt;
&amp;lt;!-- image --&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;usage&#34;&gt;Usage&lt;/h3&gt;

&lt;p&gt;I simply changed:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{% image full http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg &amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were &amp;quot;having fun&amp;quot; and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; -&amp;gt;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/ %}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;to this (this example uses a slightly extended version named &lt;code&gt;fig&lt;/code&gt;, different than the built-in &lt;code&gt;figure&lt;/code&gt;):&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{{% fig class=&amp;quot;full&amp;quot; src=&amp;quot;http://farm5.staticflickr.com/4136/4829260124_57712e570a_o_d.jpg&amp;quot; title=&amp;quot;One of my favorite touristy-type photos. I secretly waited for the good light while we were having fun and took this. Only regret: a stupid pole in the top-left corner of the frame I had to clumsily get rid of at post-processing.&amp;quot; link=&amp;quot;http://www.flickr.com/photos/alexnormand/4829260124/in/set-72157624547713078/&amp;quot; %}}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As a bonus, the shortcode named parameters are, arguably, more readable.&lt;/p&gt;

&lt;h2 id=&#34;finishing-touches&#34;&gt;Finishing touches&lt;/h2&gt;

&lt;h3 id=&#34;fix-content&#34;&gt;Fix content&lt;/h3&gt;

&lt;p&gt;Depending on the amount of customization that was done with each post with Jekyll, this step will require more or less effort. There are no hard and fast rules here except that &lt;code&gt;hugo server --watch&lt;/code&gt; is your friend. Test your changes and fix errors as needed.&lt;/p&gt;

&lt;h3 id=&#34;clean-up&#34;&gt;Clean up&lt;/h3&gt;

&lt;p&gt;You&amp;rsquo;ll want to remove the Jekyll configuration at this point. If you have anything else that isn&amp;rsquo;t used, delete it.&lt;/p&gt;

&lt;h2 id=&#34;a-practical-example-in-a-diff&#34;&gt;A practical example in a diff&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://heyitsalex.net/&#34;&gt;Hey, it&amp;rsquo;s Alex&lt;/a&gt; was migrated in less than a &lt;em&gt;father-with-kids day&lt;/em&gt; from Jekyll to Hugo. You can see all the changes (and screw-ups) by looking at this &lt;a href=&#34;https://github.com/alexandre-normand/alexandre-normand/compare/869d69435bd2665c3fbf5b5c78d4c22759d7613a...b7f6605b1265e83b4b81495423294208cc74d610&#34;&gt;diff&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>